GETWD()
getwd()
# include and load required libraries
source("qbms.R")
# config your BMS connection
qbms_config$server <- "bms.icarda.org"
# if you are not connecting BMS server using SSL layer,
# then comment the following two lines
qbms_config$protocol <- "https://"
qbms_config$port <- 18443
# login using your BMS account (interactive mode)
# You can pass BMS username and password as parameters (batch mode)
login_bms()
# list supported crops in the bms server
list_crops()
set_crop("Tutorial1")
# list existing breeding programs
list_programs()
# select a breeding program by name
set_program("Training Breeding Program")
# list all studies/trials in the selected program
list_trials()
list_trials(2017)
# select a specific study/trial by name
set_trial("CIDTN-2016")
# get observation variable ontology
ontology <- get_trial_obs_ontology()
View(ontology)
# list all environments/locations in the selected study/trial
list_studies()
# select a specific environment/location dataset
set_study("FLRP")
# retrieve general information, data, and germplasm list of the selected environment/location
info <- get_study_info()
data <- get_study_data()
View(data)
germplasm <- get_germplasm_list()
get_germplasm_list <- function() {
if (is.null(qbms_state$trial_db_id)) {
stop(paste("No trial has been selected yet!",
"You have to set your trial first using",
"the `set_trial()` function"))
}
# replace the API call by the following BrAPI once implemented in BMS
# https://github.com/plantbreeding/API/blob/V1.2/Specification/Studies/Studies_Germplasm_GET.md
#
# BMS implementation for this BrAPI call is coming in version 14
# https://github.com/plantbreeding/API/blob/master/Specification/Studies/Studies_StudyDbId_Germplasm_GET.yaml
#
# This old BMS API calls has been deprecated in v14
#
my_url <- paste0(qbms_config$base_url, "/study/", qbms_config$crop, "/", qbms_state$trial_db_id, "/germplasm")
response <- GET(url = my_url, add_headers("X-Auth-Token" = qbms_state$token))
germplasm_list <- fromJSON(content(response, as = "text"))
#crop_url <- paste0(qbms_config$base_url, "/", qbms_config$crop, "/brapi/v1")
#call_url <- paste0(crop_url, "/studies/", qbms_state$study_db_id, "/germplasm")
#germplasm_list <- brapi_get_call(call_url)
return(germplasm_list)
}
germplasm <- get_germplasm_list()
View(germplasm)
# retrive multi-environment trial data
MET <- get_trial_data()
View(MET)
germplasm_observations <- get_germplasm_data("FLIP10-3C")
View(germplasm_observations)
germplasm_name
germplasm_name <- "FLIP10-3C"
crop_url <- paste0(qbms_config$base_url, "/", qbms_config$crop, "/brapi/v1")
call_url <- paste0(crop_url, "/germplasm-search?germplasmName=", germplasm_name)
call_url
germplasm_db_id <- brapi_get_call(call_url)$data$germplasmDbId
germplasm_db_id
call_url  <- paste0(crop_url, "/phenotypes-search")
call_body <- list(germplasmDbIds = c(germplasm_db_id,""), observationLevel = "PLOT")
auth_code <- paste0("Bearer ", qbms_state$token)
response <- POST(call_url, body=call_body, encode="json", add_headers(c("Authorization" = auth_code, "Accept-Encoding" = "gzip, deflate")))
results <- content(response)$result$data
flatten_results <- fromJSON(toJSON(results), flatten = TRUE)
View(flatten_results)
# unlist nested list with id
unlisted_observations <- rbindlist(flatten_results$observations, fill = TRUE, idcol = "id")
View(unlisted_observations)
# create same id in remaining data frame
flatten_results$id <- seq.int(nrow(flatten_results))
# join data frame with unlisted list
flatten_results <- left_join(flatten_results, unlisted_observations, by = "id")
#get rind of unnecessary columns
flatten_results$observations <- NULL
flatten_results$id <- NULL
View(flatten_results)
get_germplasm_data <- function(germplasm_name) {
crop_url <- paste0(qbms_config$base_url, "/", qbms_config$crop, "/brapi/v1")
call_url <- paste0(crop_url, "/germplasm-search?germplasmName=", germplasm_name)
germplasm_db_id <- brapi_get_call(call_url)$data$germplasmDbId
# https://github.com/plantbreeding/API/blob/V1.2/Specification/Phenotypes/PhenotypesSearch_POST.md
# Note 1: It does not work with germplasm name (BrAPI specifications): e.g. {"germplasmDbIds": ["ILC 3279"]}
# Note 2: Return "Invalid request body" if we search for one germplasm_db_id!
call_url  <- paste0(crop_url, "/phenotypes-search")
call_body <- list(germplasmDbIds = c(germplasm_db_id,""), observationLevel = "PLOT")
auth_code <- paste0("Bearer ", qbms_state$token)
response <- POST(call_url, body=call_body, encode="json", add_headers(c("Authorization" = auth_code, "Accept-Encoding" = "gzip, deflate")))
results <- content(response)$result$data
flatten_results <- fromJSON(toJSON(results), flatten = TRUE)
# unlist nested list with id
unlisted_observations <- rbindlist(flatten_results$observations, fill = TRUE, idcol = "id")
# create same id in remaining data frame
flatten_results$id <- seq.int(nrow(flatten_results))
# join data frame with unlisted list
flatten_results <- left_join(flatten_results, unlisted_observations, by = "id")
# get rid of unnecessary columns
flatten_results$observations <- NULL
flatten_results$id <- NULL
# still need to filter out unnecessary columns,
# extract locations info. using get_study_info function,
# then rejoin that info. to this master observation table
return(flatten_results)
}
germplasm_observations <- get_germplasm_data("FLIP10-3C")
View(germplasm_observations)
call_url
sep
sep <- if (grepl("\\?", call_url)) "&" else "?"
sep
koko <- paste0(call_url,"?aha=123&off=TRUE")
sep <- if (grepl("\\?", koko)) "&" else "?"
sep
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
?txtProgressBar
brapi_get_call <- function(call_url){
separator <- if (grepl("\\?", call_url)) "&" else "?"
full_url  <- paste0(call_url, separator, "page=0&pageSize=", qbms_config$page_size)
auth_code <- paste0("Bearer ", qbms_state$token)
headers   <- c("Authorization" = auth_code, "Accept-Encoding" = "gzip, deflate")
response  <- GET(URLencode(full_url), add_headers(headers))
result_object <- fromJSON(content(response, as = "text"))
result_info   <- result_object$result
if (result_object$metadata$pagination$totalPages > 1) {
last_page <- result_object$metadata$pagination$totalPages - 1
for (n in 1:last_page) {
full_url <- paste0(call_url, separator, "page=", n, "&pageSize=", qbms_config$page_size)
}
}
total <- 20
# create progress bar
pb <- txtProgressBar(min = 0, max = total, style = 3)
for(i in 1:total){
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, i)
}
close(pb)
return(result_info)
}
# list all studies/trials in the selected program
list_trials()
list_trials(2017)
brapi_get_call <- function(call_url){
separator <- if (grepl("\\?", call_url)) "&" else "?"
full_url  <- paste0(call_url, separator, "page=0&pageSize=", qbms_config$page_size)
auth_code <- paste0("Bearer ", qbms_state$token)
headers   <- c("Authorization" = auth_code, "Accept-Encoding" = "gzip, deflate")
response  <- GET(URLencode(full_url), add_headers(headers))
result_object <- fromJSON(content(response, as = "text"))
result_info   <- result_object$result
if (result_object$metadata$pagination$totalPages > 1) {
last_page <- result_object$metadata$pagination$totalPages - 1
pb <- txtProgressBar(min = 1, max = last_page, style = 3)
for (n in 1:last_page) {
full_url <- paste0(call_url, separator, "page=", n, "&pageSize=", qbms_config$page_size)
setTxtProgressBar(pb, n)
}
close(pb)
}
return(result_info)
}
# list all studies/trials in the selected program
list_trials()
brapi_get_call <- function(call_url){
separator <- if (grepl("\\?", call_url)) "&" else "?"
full_url  <- paste0(call_url, separator, "page=0&pageSize=", qbms_config$page_size)
auth_code <- paste0("Bearer ", qbms_state$token)
headers   <- c("Authorization" = auth_code, "Accept-Encoding" = "gzip, deflate")
response  <- GET(URLencode(full_url), add_headers(headers))
result_object <- fromJSON(content(response, as = "text"))
result_info   <- result_object$result
if (result_object$metadata$pagination$totalPages > 0) {
last_page <- result_object$metadata$pagination$totalPages - 1
pb <- txtProgressBar(min = 1, max = last_page, style = 3)
for (n in 1:last_page) {
full_url <- paste0(call_url, separator, "page=", n, "&pageSize=", qbms_config$page_size)
setTxtProgressBar(pb, n)
}
close(pb)
}
return(result_info)
}
# list all studies/trials in the selected program
list_trials()
brapi_get_call <- function(call_url){
separator <- if (grepl("\\?", call_url)) "&" else "?"
full_url  <- paste0(call_url, separator, "page=0&pageSize=", qbms_config$page_size)
auth_code <- paste0("Bearer ", qbms_state$token)
headers   <- c("Authorization" = auth_code, "Accept-Encoding" = "gzip, deflate")
response  <- GET(URLencode(full_url), add_headers(headers))
result_object <- fromJSON(content(response, as = "text"))
result_info   <- result_object$result
if (result_object$metadata$pagination$totalPages > 0) {
last_page <- result_object$metadata$pagination$totalPages - 1
pb <- txtProgressBar(min = 0, max = last_page, style = 3)
for (n in 1:last_page) {
full_url <- paste0(call_url, separator, "page=", n, "&pageSize=", qbms_config$page_size)
setTxtProgressBar(pb, n)
}
close(pb)
}
return(result_info)
}
# list all studies/trials in the selected program
list_trials()
brapi_get_call <- function(call_url){
separator <- if (grepl("\\?", call_url)) "&" else "?"
full_url  <- paste0(call_url, separator, "page=0&pageSize=", qbms_config$page_size)
auth_code <- paste0("Bearer ", qbms_state$token)
headers   <- c("Authorization" = auth_code, "Accept-Encoding" = "gzip, deflate")
response  <- GET(URLencode(full_url), add_headers(headers))
result_object <- fromJSON(content(response, as = "text"))
result_info   <- result_object$result
if (result_object$metadata$pagination$totalPages > 0) {
last_page <- result_object$metadata$pagination$totalPages - 1
last_page <- 25
pb <- txtProgressBar(min = 1, max = last_page, style = 3)
for (n in 1:last_page) {
full_url <- paste0(call_url, separator, "page=", n, "&pageSize=", qbms_config$page_size)
setTxtProgressBar(pb, n)
}
close(pb)
}
return(result_info)
}
brapi_get_call <- function(call_url){
separator <- if (grepl("\\?", call_url)) "&" else "?"
full_url  <- paste0(call_url, separator, "page=0&pageSize=", qbms_config$page_size)
auth_code <- paste0("Bearer ", qbms_state$token)
headers   <- c("Authorization" = auth_code, "Accept-Encoding" = "gzip, deflate")
response  <- GET(URLencode(full_url), add_headers(headers))
result_object <- fromJSON(content(response, as = "text"))
result_info   <- result_object$result
if (result_object$metadata$pagination$totalPages > 0) {
last_page <- result_object$metadata$pagination$totalPages - 1
last_page <- 25
pb <- txtProgressBar(min = 1, max = last_page, style = 3)
for (n in 1:last_page) {
full_url <- paste0(call_url, separator, "page=", n, "&pageSize=", qbms_config$page_size)
setTxtProgressBar(pb, n)
}
close(pb)
}
return(result_info)
}
# list all studies/trials in the selected program
list_trials()
bms_trials <- get_program_trials()
brapi_get_call <- function(call_url){
separator <- if (grepl("\\?", call_url)) "&" else "?"
full_url  <- paste0(call_url, separator, "page=0&pageSize=", qbms_config$page_size)
auth_code <- paste0("Bearer ", qbms_state$token)
headers   <- c("Authorization" = auth_code, "Accept-Encoding" = "gzip, deflate")
response  <- GET(URLencode(full_url), add_headers(headers))
result_object <- fromJSON(content(response, as = "text"))
result_info   <- result_object$result
if (result_object$metadata$pagination$totalPages > 1) {
last_page <- result_object$metadata$pagination$totalPages - 1
pb <- txtProgressBar(min = 1, max = last_page, style = 3)
for (n in 1:last_page) {
full_url <- paste0(call_url, separator, "page=", n, "&pageSize=", qbms_config$page_size)
# Code to aggregate the response from several pages in one result object
setTxtProgressBar(pb, n)
}
close(pb)
}
return(result_info)
}
bms_trials <- get_program_trials()
View(bms_trials)
?left_join
# include and load required libraries
source("qbms.R")
# config your BMS connection
qbms_config$server <- "bms.icarda.org"
# if you are not connecting BMS server using SSL layer,
# then comment the following two lines
qbms_config$protocol <- "https://"
qbms_config$port <- 18443
# login using your BMS account (interactive mode)
# You can pass BMS username and password as parameters (batch mode)
login_bms()
# list supported crops in the bms server
list_crops()
set_crop("Tutorial1")
# list existing breeding programs
list_programs()
# select a breeding program by name
set_program("Training Breeding Program")
# list all studies/trials in the selected program
list_trials()
list_trials(2017)
# select a specific study/trial by name
set_trial("CIDTN-2016")
# get observation variable ontology
ontology <- get_trial_obs_ontology()
View(ontology)
# list all environments/locations in the selected study/trial
list_studies()
# select a specific environment/location dataset
set_study("FLRP")
# retrieve general information, data, and germplasm list of the selected environment/location
info <- get_study_info()
data <- get_study_data()
View(data)
germplasm <- get_germplasm_list()
View(germplasm)
# retrive multi-environment trial data
MET <- get_trial_data()
View(MET)
# retrive observations data of a given germplasm aggregated from all trials
germplasm_observations <- get_germplasm_data("FLIP10-3C")
View(germplasm_observations)
# retrieve general information, data, and germplasm list of the selected environment/location
info <- get_study_info()
str(result_object)
result_object$errors
!is.na(result_object$errors)
length(result_object$error)
exists(result_object$errors)
exists("result_object$errors")
exists("result_object")
exists("errors")
?exists
?exists
exists("result_object")
exists("result_object[[errors]]")
exists("result_object[['errors']]")
is.null(result_object$errors)
!is.null(result_object$errors)
brapi_get_call <- function(call_url){
separator <- if (grepl("\\?", call_url)) "&" else "?"
full_url  <- paste0(call_url, separator, "page=0&pageSize=", qbms_config$page_size)
auth_code <- paste0("Bearer ", qbms_state$token)
headers   <- c("Authorization" = auth_code, "Accept-Encoding" = "gzip, deflate")
response  <- GET(URLencode(full_url), add_headers(headers))
result_object <- fromJSON(content(response, as = "text"))
result_info   <- result_object$result
if (result_object$metadata$pagination$totalPages > 1 && is.null(result_object$errors)) {
last_page <- result_object$metadata$pagination$totalPages - 1
pb <- txtProgressBar(min = 1, max = last_page, style = 3)
for (n in 1:last_page) {
full_url <- paste0(call_url, separator, "page=", n, "&pageSize=", qbms_config$page_size)
# Code to aggregate the response from several pages in one result object
setTxtProgressBar(pb, n)
}
close(pb)
}
return(result_info)
}
# retrieve general information, data, and germplasm list of the selected environment/location
info <- get_study_info()
# list all environments/locations in the selected study/trial
list_studies()
